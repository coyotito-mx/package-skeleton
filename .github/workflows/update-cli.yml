name: Update CLI Binary

on:
  workflow_dispatch:
    inputs:
      download_url:
        description: The CLI download URL
        type: string
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  validation:
    concurrency:
      group: update-cli-${{ github.ref }}
      cancel-in-progress: false

    runs-on: ubuntu-latest

    steps:
      - name: Minimal origin guard (owner + sender)
        if: ${{
              github.repository_owner != 'coyotito-mx' ||
              (
                github.event.sender.login != 'asciito' &&
                github.event.sender.login != 'github-actions[bot]'
              )
            }}
        uses: actions/github-script@v8
        with:
          script: |
            core.setFailed('Blocked: org or sender is not allowed')

      - name: Validate URL
        uses: actions/github-script@v8
        with:
          script: |
            const downloadUrl = ${{ toJson(inputs.download_url) }};

            core.debug(downloadUrl);

            // Ensure is a URL
            let url;

            try {
              url = new URL(downloadUrl);
            } catch {
              core.setFailed('Invalid URL format');

              return;
            }

            // Validate Protocol and Host
            if (
              url.protocol !== 'https:' ||
              url.hostname.toLowerCase() !== 'github.com'
            ) {
              core.setFailed("Invalid URL, the URL must be 'https://github.com'");

              return;
            }

            // Validate path segments
            const segments = url.pathname.split('/').filter(Boolean)

            if (
              segments.length !== 6 ||
              segments[0] !== 'coyotito-mx' ||
              segments[2] !== 'releases' ||
              segments[3] !== 'download'
            ) {
              core.debug("Path segments: " + JSON.stringify(segments));

              core.setFailed('URL path is not a GitHub release asset under coyotito-mx');

              return;
            }

  download-cli:
    needs: validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download CLI
        shell: bash
        run: |
          # Download CLI
          curl -sL -o asset.tar.gz "${{ inputs.download_url }}"

          # Rename old CLI
          mv ./skeleton ./skeleton-old

          # Extract file
          tar -xf asset.tar.gz

      - name: Get CLI versions
        id: cli-versions
        shell: bash
        run: |
          old_version="$(./skeleton-old -V)"
          new_version="$(./skeleton -V)"

          echo "old-version=$old_version" >> $GITHUB_OUTPUT
          echo "new-version=$new_version" >> $GITHUB_OUTPUT

      - name: Create PR
        uses: peter-evans/create-pull-request@v7
        with:
          title: 'Update CLI to `${{ steps.cli-versions.outputs.new-version }}`'
          branch: 'chore/update-cli'
          sign-commits: true
          commit-message: |
            The CLI got updated

            `[${` steps.cli-versions.outputs.old-version }}]` to `[${{ steps.cli-versions.outputs.new-version }}]`



